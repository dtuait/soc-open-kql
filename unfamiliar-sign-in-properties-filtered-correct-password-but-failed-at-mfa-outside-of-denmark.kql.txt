let MySecurityAlert = SecurityAlert
| where AlertName == "Unfamiliar sign-in properties"
| where Description has "Location"
| extend ParsedProperties = parse_json(ExtendedProperties)
| extend OriginalRequestId = tostring(ParsedProperties["Request Id"])
| extend UserId = tostring(parse_json(Entities)[0].AadUserId);
// | project UserId, OriginalRequestId
// Get all incidents where a user, put in the correct password, but the wrong was rejected at MFA, for whatever reason. E.g timeout, outside of Denmark.
// This is partly a trigger to send a notification to the user, letting them know that they, e.g. logged in from Dubai etc.
let MyLocation = "DK";
let MFA_RequiredErrors = dynamic(["50074", "50076", "50087", "500121"]);
// Define a dataset for failed logins based on location and certain result types
//50074 - Strong Authentication is required.
//50076 - Due to a configuration change made by your administrator, or because you moved to a new location, you must use multi-factor authentication to access the resource.
//500121 - Authentication failed during strong authentication request 
//50087 - A transient error has occurred during strong authentication. Please try again.
SigninLogs
| extend LocationDetailsJson = parse_json(LocationDetails)
| extend  City = tostring(LocationDetailsJson.city), 
          State = tostring(LocationDetailsJson.state), 
          CountryOrRegion = tostring(LocationDetailsJson.countryOrRegion)
| extend FriendlyLocation = strcat(City, ", ", State, ", ", CountryOrRegion)
| extend AuthenticationDetailsJson = parse_json(AuthenticationDetails)
| extend AuthenticationMethod = tostring(AuthenticationDetailsJson[0].authenticationMethod)
| extend AuthenticationMethodDetail = tostring(AuthenticationDetailsJson[0].authenticationMethodDetail)
| extend Succeeded = tostring(AuthenticationDetailsJson[0].succeeded)
| extend FirstAuthSucceeded = tostring(AuthenticationDetailsJson[0].succeeded)
| extend PW_Succeeded = Succeeded
| where ResultType !in (MFA_RequiredErrors)
| where Location  != MyLocation
| where AuthenticationMethod contains "Password"
// Check if multifactor exists by verifying if AuthenticationDetailsJson length is greater than 1
| extend MFA_Present = iff(array_length(AuthenticationDetailsJson) > 1, "Yes", "No")
// Check if any of the subsequent MFA authentications (index 1, 2, ...) succeeded
| extend MFA_Succeeded = iff(array_length(AuthenticationDetailsJson) > 1 and tobool(AuthenticationDetailsJson[1].succeeded), "True", "False")
// check if there is a multifactor by Length(AuthenticationDetailsJson[0] > 1
// then check if AuthenticationDetailsJson[1,2,3..].succeeded is true
| where ResultType !in (MFA_RequiredErrors)
| where CountryOrRegion != MyLocation
// Filter for cases where password is successful
| where Succeeded == "true"
// Filter for cases where the MFA failed after successful password authentication
| where MFA_Succeeded == "False"
// | where Location == "RU"
| join kind=innerunique (MySecurityAlert) on OriginalRequestId
| project TimeGenerated, 
          UserPrincipalName,
          AppDisplayName,
          PW_Succeeded,
          MFA_Succeeded,
          UserDisplayName, 
          AuthenticationMethod,
          // AuthenticationMethodDetail,
          Location,
          FriendlyLocation, 
          IPAddress,  
          UserAgent,
          City,
          //   ResultType,
          //   ResultDescription,
          OriginalRequestId,
          // ConditionalAccessPolicies,
          // AuthenticationProcessingDetails,
          // LocationDetails,
          // MfaDetail,
          AuthenticationDetails
// | limit 10;
